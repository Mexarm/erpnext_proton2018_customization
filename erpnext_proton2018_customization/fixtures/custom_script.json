[
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Production Order", 
  "modified": "2018-06-15 17:07:06.284679", 
  "name": "Production Order-Client", 
  "script": "\n/* eslint-disable no-undef */\n/* eslint-disable semi */\n/* eslint-disable camelcase */\n/* eslint-disable quotes */\n\nerpnext.production_order_PL = {\n  set_custom_buttons: function (frm) {\n    var doc = frm.doc;\n    if (doc.docstatus === 1) {\n      if (!frm.doc.skip_transfer) {\n        if (flt(doc.material_transferred_for_manufacturing_impresion) < flt(doc.qty) && frm.doc.status !== \"Stopped\" && frm.doc.printrequired) {\n          frm.has_iniciar_impresion_btn = true;\n          var start_btn1 = frm.add_custom_button(__(\"Iniciar Impresion\"), function () {\n            erpnext.production_order_PL.make_se(frm, \"Material Transfer for Manufacture\", \"impresion\");\n          });\n          start_btn1.addClass(\"btn-warning\");\n        }\n        if (flt(doc.material_transferred_for_manufacturing_produccion) < flt(doc.qty) && frm.doc.status !== \"Stopped\" && frm.doc.prodrequired) {\n          // frm.has_iniciar_produccion_btn = true;\n          var start_btn2 = frm.add_custom_button(__(\"Iniciar Produccion\"), function () {\n            erpnext.production_order_PL.make_se(frm, \"Material Transfer for Manufacture\", \"produccion\");\n          });\n          start_btn2.addClass(\"btn-info\");\n        }\n      }\n    }\n  },\n  make_se: function (frm, purpose, tipo) {\n    var material_transferred_for_manufacturing = frm.doc[\"material_transferred_for_manufacturing_\" + tipo]; // custom\n\n    var max;\n    if (!frm.doc.skip_transfer) {\n      max =\n        purpose === \"Manufacture\"\n          ? flt(frm.doc.material_transferred_for_manufacturing) - flt(frm.doc.produced_qty)\n          : flt(frm.doc.qty) - flt(material_transferred_for_manufacturing);\n    } else {\n      max = flt(frm.doc.qty) - flt(frm.doc.produced_qty);\n    }\n\n    max = flt(max, precision(\"qty\"));\n    frappe.prompt(\n      {\n        fieldtype: \"Float\",\n        label: tipo + \":\" + __(\"Qty for {0}\", [purpose]),\n        fieldname: \"qty\",\n        description: __(\"Max: {0}\", [max]),\n        default: max\n      },\n      function (data) {\n        if (data.qty > max) {\n          frappe.msgprint(__(\"Quantity must not be more than {0}\", [max]));\n          return;\n        }\n        frappe.call({\n          method: \"erpnext_proton2018_customization.erpnext_proton2018_customization.doctype.production_order.production_order.make_stock_entry\",\n          // \"erpnext.manufacturing.doctype.production_order.production_order.make_stock_entry\",\n          args: {\n            production_order_id: frm.doc.name,\n            purpose: purpose,\n            qty: data.qty,\n            tipo: tipo // added\n          },\n          callback: function (r) {\n            var doclist = frappe.model.sync(r.message);\n            frappe.set_route(\"Form\", doclist[0].doctype, doclist[0].name);\n          }\n        });\n      },\n      __(\"Select Quantity\"),\n      __(\"Make\")\n    );\n  },\n  setPrintProdRequired: function (doc) {\n    // returns the ID of the active BOM for the current Production Order Item Code.\n    var hasPrint = false;\n    var hasProd = false;\n    $.each(doc.required_items, function (index, row) {\n      frappe.model.get_value(\n        \"Item\",\n        { item_code: row.item_code },\n        \"print_process_required\",\n        function (values) {\n          if (values.print_process_required === 1) {\n            hasPrint = true\n          } else {\n            hasProd = true\n          }\n          if (hasPrint) {\n            doc.printrequired = 1;\n          }\n          if (hasProd) {\n            doc.prodrequired = 1;\n          }\n        }\n      );\n    });\n  }\n};\n\n// validaciones y onload\ncur_frm.cscript.custom_validate = function (doc) {\n  erpnext.production_order_PL.setPrintProdRequired(doc);\n  if (\"wip_warehouse\" in doc) {\n    if (doc.wip_warehouse.indexOf(\"(WIP)\") === -1) {\n      frappe.msgprint(__(\"WIP warehouse not correct\"));\n      frappe.validated = false;\n    }\n  } else {\n    frappe.msgprint(__(\"WIP warehouse is required\"));\n    frappe.validated = false;\n  }\n};\nfrappe.ui.form.on(\"Production Order\", {\n  refresh: function (frm, cdt, cdn) {\n    erpnext.production_order_PL.set_custom_buttons(frm);\n    if (!(\"fg_warehouse\" in frm)) {\n      frappe.model.set_value(cdt, cdn, \"fg_warehouse\", \"Productos terminados (FG) - PL\");\n    }\n\n    if (!(\"wip_warehouse\" in frm)) {\n      frappe.model.set_value(cdt, cdn, \"wip_warehouse\", \"Trabajo en proceso (WIP) - PL\");\n    }\n    if (!(\"scrap_warehouse\" in frm)) {\n      frappe.model.set_value(cdt, cdn, \"scrap_warehouse\", \"Desperdicio (SCRAP) - PL\");\n    }\n    frm.set_df_property(\"fg_warehouse\", \"reqd\", 1);\n    frm.set_df_property(\"wip_warehouse\", \"reqd\", 1);\n    frm.set_df_property(\"scrap_warehouse\", \"reqd\", 1);\n  },\n  onload: function (frm, cdt, cdn) {\n    erpnext.production_order_PL.setPrintProdRequired(frm.doc);\n  }\n});\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Stock Entry", 
  "modified": "2018-06-26 16:15:21.334396", 
  "name": "Stock Entry-Client", 
  "script": "/* eslint-disable no-undef */\n/* eslint-disable semi */\n/* eslint-disable camelcase */\n/* eslint-disable quotes */\n\ncur_frm.cscript.custom_validate = function (frm, cdt, cdn) {\n  var d = locals[cdt][cdn];\n  if (\n    [\"Material Transfer for Manufacturing\", \"Manufacture\"].indexOf(d.purpose) >=\n    0\n  ) {\n    if (d.hasOwnProperty(\"production_order\") && d[\"production_order\"] === \"\") {\n      frappe.msgprint(__(\"Production Order Required for {0}\", [d.purpose]));\n      frappe.validated = false;\n    }\n  }\n\n  if (d.purpose === \"Manufacture\") {\n    var po = frappe.get_doc(\"Production Order\", d.production_order);\n    var a = (po.printrequired && po.material_transferred_for_manufacturing_impresion) || po.qty;\n    var b = (po.printrequired && po.material_transferred_for_manufacturing_imp_a_prod) || po.qty;\n    var c = (po.prodrequired && po.material_transferred_for_manufacturing_produccion) || po.qty;\n    if (!((d.fg_completed_qty <= a) && (d.fg_completed_qty <= b) && (d.fg_completed_qty <= c))) {\n      frappe.msgprint(__(\"No se han completado las transferencias de material para manufactura para {0}\", [d.production_order]));\n      frappe.validated = false;\n    }\n  }\n\n  if (d.purpose === \"Material Transfer for Manufacture\") {\n    if (d.hasOwnProperty(\"tipo\") && d[\"tipo\"] === \"impresion\") {\n      var error = false;\n      $.each(d.items, function (index, row) {\n        if (!(row.t_warehouse === \"Impresion - WIP - PL\")) {\n          error = true;\n        }\n      });\n\n      if (error) {\n        frappe.msgprint(__(\"Almacen destino debe ser Impresion - WIP - PL\"));\n        frappe.validated = false;\n      }\n    }\n\n    // get minimum qty of items that can be manufactured with the transferred qty\n    frappe.call({\n      method: \"erpnext_proton2018_customization.erpnext_proton2018_customization.doctype.stock_entry.stock_entry.get_transferred_qty\",\n      args: {\n        production_order_id: frm.production_order,\n        item_list: frm.items\n      },\n      callback: function (r) {\n        frm.fg_completed_qty = r.message;\n      }\n    });\n  }\n\n  if ((d.from_warehouse === \"Impresion - WIP - PL\") && (d.to_warehouse === \"Trabajo en proceso (WIP) - PL\")) {\n    d.tipo = 'imp_a_prod';\n  }\n};\n\nconst erpProton2018 = {}\n\nerpProton2018.hasPermission = (row, user_roles) => {\n  const src = typeof row.s_warehouse === \"string\" ? row.s_warehouse : false;\n  const tgt = typeof row.t_warehouse === \"string\" ? row.t_warehouse : false;\n\n  function hasAllowedRole(promise) {\n    return promise\n      .then((roleList) => {\n        let hasPermission = false;\n        $.each(roleList, (i, role) => {\n          if (user_roles.indexOf(role.role)) {\n            hasPermission = true;\n          }\n        })\n        return hasPermission;\n      })\n  }\n\n  let p1 = src && frappe.db.get_list(\"Role Entry\", {\n    filters: { parent: src, parentField: \"source_roles\" },\n    fields: ['role', 'parentField']\n  })\n\n  let p2 = tgt && frappe.db.get_list(\"Role Entry\", {\n    filters: { parent: tgt, parentField: \"target_roles\" },\n    fields: ['role', 'parentField']\n  })\n\n  if (p1 && p2) {\n    return Promise.all([hasAllowedRole(p1), hasAllowedRole(p2)]).then(([r1, r2]) => r1 && r2)\n  } else {\n    if (p1) {\n      return hasAllowedRole(p1);\n    } else {\n      return hasAllowedRole(p2);\n    }\n  }\n}\n\nerpProton2018.verifyWarehouses = function (frm, cdt, cdn) {\n  var d = locals[cdt][cdn];\n  if (d.purpose === \"Material Transfer for Manufacture\") {\n    $.each(d.items, function (index, row) {\n      frappe.model.get_value(\n        \"Item\",\n        { item_code: row.item_code },\n        \"print_process_required\",\n        function (d) {\n          row.impresion = d.print_process_required;\n          if (row.impresion === 1) {\n            row.t_warehouse = \"Impresion - WIP - PL\";\n          }\n        }\n      );\n    });\n  }\n}\n\nfrappe.ui.form.on(\"Stock Entry\", {\n  onload: function (frm, cdt, cdn) {\n    erpProton2018.verifyWarehouses(frm, cdt, cdn);\n  },\n  refresh: function (frm, cdt, cdn) {\n    erpProton2018.verifyWarehouses(frm, cdt, cdn);\n  },\n  before_submit: function (frm, cdt, cdn) {\n    const stock_entries = frappe.model.get_list(\"Stock Entry Detail\", { parent: frm.doc.name });\n    function getPromisesList(stock_entries) {\n      let pList = []\n      $.each(stock_entries, (n, row) => {\n        //console.log(\"stock entry:\", row)\n        pList.push(erpProton2018.hasPermission(row, frappe.user_roles))\n      })\n      return pList;\n    }\n    const promisesList = getPromisesList(stock_entries);\n    return Promise.all(promisesList)\n      .then(list => {\n        //console.log(\"permission list:\", list)\n        //console.log(\"validated:\", list.indexOf(false) === -1)\n        frappe.validated = list.indexOf(false) === -1\n        if (!frappe.validated) {\n          frappe.msgprint(\"No esta autorizado a validar el movimiento de producto en la linea numero \" + (list.indexOf(false) + 1))\n        }\n      })\n  }\n});\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Grafica de Impresion", 
  "modified": "2018-06-08 14:45:44.470949", 
  "name": "Grafica de Impresion-Client", 
  "script": "cur_frm.set_query('sales_order', function () {\n\treturn {\n\t\tfilters: {\n\t\t\t'status': 'To Deliver and Bill'\n\t\t}\n\t}\n});\n\ncur_frm.fields_dict['archivos_spool'].grid.get_field('material').get_query = function (doc, cdt, cdn) {\n\tvar d = locals[cdt][cdn];\n\treturn {\n\t\tfilters: [[\n\t\t\t'Item', 'print_process_required', '=', 1\n\t\t]]\n\t}\n};\n\nfrappe.ui.form.on(\"Grafica de Impresion\", \"wfd_status\", function (frm, cdt, cdn) {\n\tconsole.log('status changed', frm);\n\tif (frm.doc.wfd_status === \"Rechazado\") {\n\n\t\tfrappe.prompt({\n\t\t\tfieldtype: \"Data\", label: __(\"Motivo de cancelacion de Grafica de Impresion {0}\", [frm.doc.name]), fieldname: \"causa\",\n\t\t\tdescription: __(\"Detalle el motivo de cancelacion para {0}\", [frm.doc.owner]), 'default': ''\n\t\t},\n\t\t\tfunction (data) {\n\t\t\t\tfrm.set_value(\"causa_de_rechazo\",data.causa);\n\t\t\t\tconsole.log('inside callback', frm);\n\t\t\t\tfrappe.call({\n\t\t\t\t\tmethod: 'erpnext_proton2018_customization.erpnext_proton2018_customization.doctype.grafica_de_impresion.grafica_de_impresion.save_causa_de_rechazo',\n\t\t\t\t\targs: {\n\t\t\t\t\t\tform_dict: frm.doc\n\t\t\t\t\t},\n\t\t\t\t\tcallback: function (r) {\n\t\t\t\t\t\tconsole.log('callback', r);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\t, __(\"Motivo de Cancelacion\"), __(\"Aceptar\"));\n\n\t}\n});\n\nconst calculate_grafica_de_impresion_total = function(frm,cdt,cdn) {\n\t//Sum each spool_entry \n\tvar material_details = frm.doc.archivos_spool\n\tvar total = 0\n\t$.each(material_details || [],  function(i,j) {\n\t\ttotal += flt(j.cantidad_de_registros)\n\t});\n\tfrm.set_value(\"total\", total); \n};\n\nfrappe.ui.form.on(\"Spool Entry\",\"cantidad_de_registros\", function(frm,cdt,cdn) {\n\tcalculate_grafica_de_impresion_total(frm,cdt,cdn)\n});\n\nfrappe.ui.form.on(\"Grafica de Impresion\",\"refresh\", function(frm,cdt,cdn) {\n\tcalculate_grafica_de_impresion_total(frm,cdt,cdn)\n});\n\nfrappe.ui.form.on(\"Grafica de Impresion\", \"validate\", function (frm, cdt, cdn) {\n\tcalculate_grafica_de_impresion_total(frm,cdt,cdn);\t\n\tvar material_details = frm.doc.archivos_spool;\n\t$.each(material_details, function (index, row) {\n\t\tfrappe.model.get_value(\n\t\t\t\"Item\",\n\t\t\t{ item_code: row.material },\n\t\t\t\"print_process_required\",\n\t\t\tfunction (d) {\n\t\t\t\tconsole.log(d);\n\t\t\t}\n\t\t);\n\t});\n});\n\n\n/* function (data) {\n\tconsole.log('data',typeof(data.causa));\n\tif (typeof (data.causa) !== \"string\" || data.causa.length < 2) {\n\t\tfrappe.throw(__(\"Por favor especifique el motivo de rechazo\"));\n\t}\n\tfrm.set_value(\"causa_de_rechazo\",data.causa);\n\tfrm.save();\n\tfrm.refresh();\n\tconsole.log(frm);\n\t//frm.doc.causa_de_rechazo = data.causa;\n} */", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Sales Order", 
  "modified": "2018-06-27 13:24:54.611944", 
  "name": "Sales Order-Client", 
  "script": "/* eslint-disable no-undef */\n/* eslint-disable semi */\n/* eslint-disable camelcase */\n/* eslint-disable quotes */\n/* eslint-disable indent */\n\nfunction strToDate(strDateYYYY_MM_DD) {\n    const dt = strDateYYYY_MM_DD.split(\"-\")\n    return new Date(parseInt(dt[0]), parseInt(dt[1]) - 1, parseInt(dt[2]));\n}\nconst calculate_valor_total_de_productos_de_inventario_incluido = function (frm, cdt, cdn) {\n    var total = 0;\n    var diasProduccion = 0;\n    var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n    var transactionDate = typeof frm.doc.transaction_date === \"string\" ? strToDate(frm.doc.transaction_date) : false;\n    var deliveryDate = typeof frm.doc.delivery_date === \"string\" ? strToDate(frm.doc.delivery_date) : false;\n    var diffDays;\n    if (transactionDate && deliveryDate) {\n        diffDays = Math.round(Math.abs((transactionDate.getTime() - deliveryDate.getTime()) / (oneDay)));\n    }\n    var myDays = [\"domingo\", \"lunes\", \"martes\", \"miercoles\", \"jueves\", \"viernes\", \"sabado\", \"domingo\"]\n    if (deliveryDate && !frm.doc[myDays[deliveryDate.getDay()]]) {\n        frappe.validated = false;\n        frappe.msgprint(`Para este cliente no se permite programar entrega el dia ${myDays[deliveryDate.getDay()]}`)\n    }\n    $.each(frm.doc.items || [], function (i, d) {\n        if (d.item_code && d.qty > 0) {\n            frappe.call({\n                method: \"erpnext_proton2018_customization.erpnext_proton2018_customization.doctype.bom.bom.get_raw_materials_cost_and_sla_for_item\",\n                args: { item_code: d.item_code },\n                callback: function (result) {\n                    d.raw_material_cost = result.message.raw_material_cost;\n                    d.nivel_de_servicio = result.message.nivel_de_servicio;\n                    total += flt(d.qty) * flt(result.message.raw_material_cost);\n                    d.dias_de_produccion_estimados = result.message.nivel_de_servicio > 0.0 ? Math.round(flt(d.qty) / flt(result.message.nivel_de_servicio)) : 0\n                    diasProduccion = d.dias_de_produccion_estimados > diasProduccion ? d.dias_de_produccion_estimados : diasProduccion;\n                    frm.set_value(\"valor_total_de_productos_de_inventario_incluido\", total);\n                    if (typeof diffDays !== \"undefined\" && d.nivel_de_servicio && diasProduccion > diffDays) {\n                        frappe.validated = false;\n                        frappe.msgprint(`El nivel de servicio del producto ${d.item_code} es de ${d.nivel_de_servicio} piezas/dia no se pueden completar ${d.qty} piezas en ${diffDays} dia(s), por favor ajuste la fecha de entrega.`)\n                    }\n\n                }\n            })\n        }\n    });\n};\n\nconst clear_valor_total_de_productos_de_inventario_incluido = function (frm) {\n    frm.set_value(\"valor_total_de_productos_de_inventario_incluido\", null);\n    $.each(frm.doc.items || [], function (i, d) {\n        if (d.item_code) {\n            d.raw_material_cost = null;\n        }\n    })\n};\n\nfrappe.ui.form.on(\"Sales Order Item\", \"qty\", function (frm, cdt, cdn) {\n    if (frm.doc.customer.indexOf(\"BBVA\") > -1) {\n        calculate_valor_total_de_productos_de_inventario_incluido(frm, cdt, cdn);\n    } else {\n        clear_valor_total_de_productos_de_inventario_incluido(frm)\n    }\n});\n/*\nfrappe.ui.form.on(\"Sales Order\", \"refresh\", function (frm, cdt, cdn) {\n    if (frm.doc.customer.indexOf(\"BBVA\") > -1) {\n        calculate_valor_total_de_productos_de_inventario_incluido(frm, cdt, cdn);\n    } else {\n        clear_valor_total_de_productos_de_inventario_incluido(frm)\n    }\n});*/\n\nfrappe.ui.form.on(\"Sales Order\", \"validate\", function (frm, cdt, cdn) {\n    if (frm.doc.customer.indexOf(\"BBVA\") > -1) {\n        calculate_valor_total_de_productos_de_inventario_incluido(frm, cdt, cdn);\n    } else {\n        clear_valor_total_de_productos_de_inventario_incluido(frm)\n    }\n});\n\nfrappe.ui.form.on(\"Sales Order\", \"customer\", function (frm, cdt, cdn) {\n    if (frm.doc.customer.indexOf(\"BBVA\") > -1) {\n        calculate_valor_total_de_productos_de_inventario_incluido(frm, cdt, cdn);\n    } else {\n        clear_valor_total_de_productos_de_inventario_incluido(frm)\n    }\n});\n", 
  "script_type": "Client"
 }
]